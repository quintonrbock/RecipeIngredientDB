package com.yourname.recipedb.old;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class RecipeDatabaseApplication {
    public static void main(String[] args) {
        System.out.println("\n\n\n\n");
        String url = "jdbc:oracle:thin:@10.0.0.7:1521:XE"; // Update if necessary
        String user = "system"; // Change this if using a different user
        String password = "your_new_password"; // Change this to your actual password

        Connection connection = null;
        try {
            connection = DriverManager.getConnection(url, user, password);
            System.out.println("Connected to Oracle Database successfully!");

            try (Statement statement = connection.createStatement()) {
                
                // Ensure the recipes table exists
                if (!tableExists(statement, "recipes")) {
                    String createRecipesTableSQL = "CREATE TABLE recipes ("
                            + "recipe_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "
                            + "name VARCHAR2(100), "
                            + "instructions VARCHAR2(1000), "
                            + "cook_method VARCHAR2(100), "
                            + "prep_time NUMBER, "
                            + "cook_time NUMBER, "
                            + "cook_temp NUMBER, "
                            + "servings NUMBER, "
                            + "category VARCHAR2(100))";
                    statement.executeUpdate(createRecipesTableSQL);
                    System.out.println("Table 'recipes' created.");
                } else {
                    System.out.println("Table 'recipes' already exists.");
                }

                // Ensure the ingredients table exists
                if (!tableExists(statement, "ingredients")) {
                    String createIngredientsTableSQL = "CREATE TABLE ingredients ("
                            + "ingredient_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "
                            + "name VARCHAR2(100))";
                    statement.executeUpdate(createIngredientsTableSQL);
                    System.out.println("Table 'ingredients' created.");
                } else {
                    System.out.println("Table 'ingredients' already exists.");
                }

                // Ensure the user_ingredients table exists
                if (!tableExists(statement, "user_ingredients")) {
                    String createUserIngredientsTableSQL = "CREATE TABLE user_ingredients ("
                            + "user_id NUMBER, "
                            + "ingredient_id NUMBER, "
                            + "quantity NUMBER, "
                            + "PRIMARY KEY (user_id, ingredient_id))";
                    statement.executeUpdate(createUserIngredientsTableSQL);
                    System.out.println("Table 'user_ingredients' created.");
                } else {
                    System.out.println("Table 'user_ingredients' already exists.");
                }

                // Ensure the recipe_ingredients table exists
                if (!tableExists(statement, "recipe_ingredients")) {
                    String createRecipeIngredientsTableSQL = "CREATE TABLE recipe_ingredients ("
                            + "recipe_id NUMBER, "
                            + "ingredient_id NUMBER, "
                            + "quantity NUMBER, "
                            + "PRIMARY KEY (recipe_id, ingredient_id))";
                    statement.executeUpdate(createRecipeIngredientsTableSQL);
                    System.out.println("Table 'recipe_ingredients' created.");
                } else {
                    System.out.println("Table 'recipe_ingredients' already exists.");
                }
            }
            System.out.println("\n\n\n\n");
        } catch (SQLException e) {
            System.err.println("Database connection failed: " + e.getMessage());
        } finally {
            try {
                if (connection != null && !connection.isClosed()) {
                    connection.close();
                    System.out.println("Database connection closed.");
                }
            } catch (SQLException ex) {
                System.err.println("Error closing the connection: " + ex.getMessage());
            }
            // Ensure Oracle worker threads close properly
            System.exit(0);
        }
    }

    private static boolean tableExists(Statement statement, String tableName) throws SQLException {
        String checkTableSQL = "SELECT COUNT(*) AS count FROM user_tables WHERE table_name = '" + tableName + "'";
        try (ResultSet resultSet = statement.executeQuery(checkTableSQL)) {
            resultSet.next();
            return resultSet.getInt("count") > 0;
        }
    }

    public static void addRecipe() {
        String url = "jdbc:oracle:thin:@10.0.0.7:1521:XE"; // Update if necessary
        String user = "system"; // Change this if using a different user
        String password = "your_new_password"; // Change this to your actual password

        try (Connection connection = DriverManager.getConnection(url, user, password);
             Statement statement = connection.createStatement()) {

            System.out.println("Attempting to add a blank recipe...");
            int newRecipeId = getNextRecipeId(statement);
            String insertRecipeSQL = "INSERT INTO recipes (recipe_id, name, instructions) VALUES (" + newRecipeId + ", '', '')";
            statement.executeUpdate(insertRecipeSQL);
            System.out.println("Blank recipe added with recipe_id: " + newRecipeId);

        } catch (SQLException e) {
            System.err.println("Database operation failed: " + e.getMessage());
        }
    }

    private static int getNextRecipeId(Statement statement) throws SQLException {
        String getMaxIdSQL = "SELECT NVL(MAX(recipe_id), 0) AS max_id FROM recipes";
        try (ResultSet resultSet = statement.executeQuery(getMaxIdSQL)) {
            resultSet.next();
            return resultSet.getInt("max_id") + 1;
        }
    }

    public static void deleteRecipe() {
        String url = "jdbc:oracle:thin:@10.0.0.7:1521:XE"; // Update if necessary
        String user = "system"; // Change this if using a different user
        String password = "your_new_password"; // Change this to your actual password

        try (Connection connection = DriverManager.getConnection(url, user, password);
             Statement statement = connection.createStatement()) {

            System.out.println("Attempting to delete the last recipe...");
            String deleteRecipeSQL = "DELETE FROM recipes WHERE recipe_id = (SELECT MAX(recipe_id) FROM recipes)";
            statement.executeUpdate(deleteRecipeSQL);
            System.out.println("Last recipe deleted.");

        } catch (SQLException e) {
            System.err.println("Database operation failed: " + e.getMessage());
        }
    }
}
